// en.js
const en = {
  Projects: "Projects",
  Settings: "Settings",
  Language: "Language",
  new_project: "New Project",
  project_name: "Project Name",
  cancel: "Cancel",
  confirm: "Confirm",
  back: "Back",
  new_component: "New Component",
  rename_component: "Rename Component",
  select_component: "Select Component",
  add_new_relationship: "Add New Relationship",
  linked_components: "Linked Components",
  component_details: "Component Details",
  component_relationships: "Component Relationships",
  component_color: "Component Color",
  component_attributes: "Component Attributes",
  component_operations: "Component Operations",
  delete_component: "Delete Component",
  go_to_component: "Go to Component",
  close: "Close",
  download_data: "Download Data",
  component: "Component",
  class: "Class",
  component_name: "Component Name",
  component_type: "Component Type",
  anonymous: "Anonymous",
  feedback: "Feedback",
  signal_improvement: "Signal Improvement",
  leave_suggestion: "Leave a Suggestion",
  name: "Name",
  name_optional: "Your name (optional)",
  suggestion: "Suggestion",
  suggestion_placeholder: "Write your suggestion here...",
  submit: "Submit",
  export_full_project: "Capture Full Project",
  export_viewport: "Capture View",
  failed_fetch_repo: "Failed to fetch repository",
  failed_fetch_file: "Failed to fetch file",
  invalid_github_url: "Invalid GitHub URL",
  unknown_import_error: "Unknown import error",
  import_github_repo: "Import GitHub Repository",
  github_repo_url: "GitHub Repository URL",
  importing_repository: "Importing repository...",
  import: "Import",
  import_from_github: "Import from GitHub",
   glossary: "Glossary",
aggregation: "Aggregation",
aggregation_description: "A 'has-a' relationship, but the child element can exist independently of the parent.",
aggregation_example: "Example: A Team has Players. If the Team is deleted, the Players still exist.",
composition: "Composition",
composition_description: "A strong 'has-a' relationship where the child's lifecycle is tied to the parent.",
composition_example: "Example: A House has Rooms. If the House is destroyed, the Rooms are also destroyed.",
inheritance: "Inheritance",
inheritance_description: "An 'is-a' relationship where one class derives from another.",
inheritance_example: "Example: A Car is a Vehicle.",
association: "Association",
association_description: "A general connection between two classes. No implicit properties.",
association_example: "Example: A Teacher is associated with multiple Students.",
dependency: "Dependency",
dependency_description: "A class uses or depends on another for a feature, but only temporarily.",
dependency_example: "Example: A Report Generator depends on a Database during execution.",
realization: "Realization",
realization_description: "A relationship where a concrete class implements the interface or contract defined by another.",
realization_example: "Example: A Car class realizes the Vehicle interface."

};

export default en;
