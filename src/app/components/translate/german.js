// de.js
const de = {
  projects: "Projekte",
  settings: "Einstellungen",
  Language: "Sprache",
  new_project: "Neues Projekt",
  project_name: "Projektname",
  cancel: "Abbrechen",
  confirm: "Best\u00E4tigen",
  back: "Zur\u00FCck",
  new_component: "Neue Komponente",
  rename_component: "Komponente umbenennen",
  select_component: "Komponente ausw\u00E4hlen",
  add_new_relationship: "Neue Beziehung hinzuf\u00FCgen",
  linked_components: "Verkn\u00FCpfte Komponenten",
  component_details: "Komponentendetails",
  component_relationships: "Komponentenbeziehungen",
  component_color: "Komponentenfarbe",
  component_attributes: "Komponentenattribute",
  component_operations: "Komponentenoperationen",
  delete_component: "Komponente l\u00F6schen",
  go_to_component: "Zur Komponente gehen",
  close: "Schlie\u00DFen",
  download_data: "Daten herunterladen",
  component: "Komponente",
  class: "Klasse",
  component_name: "Komponentenname",
  component_type: "Komponententyp",
  anonymous: "Anonym",
  feedback: "R\u00FCckmeldung",
  signal_improvement: "Verbesserung melden",
  leave_suggestion: "Einen Vorschlag hinterlassen",
  name: "Name",
  name_optional: "Ihr Name (freiwillig)",
  suggestion: "Vorschlag",
  suggestion_placeholder: "Schreiben Sie hier Ihren Vorschlag...",
  submit: "Absenden",
  export_full_project: "Gesamtes Projekt erfassen",
  export_viewport: "Ansicht erfassen",
  failed_fetch_repo: "Repository konnte nicht abgerufen werden",
  failed_fetch_file: "Datei konnte nicht abgerufen werden",
  invalid_github_url: "Ung\u00FCltige GitHub-URL",
  unknown_import_error: "Unbekannter Importfehler",
  import_github_repo: "GitHub-Repository importieren",
  github_repo_url: "GitHub-Repository-URL",
  importing_repository: "Repository wird importiert...",
  import: "Importieren",
  import_from_github: "Von GitHub importieren",
  glossary: "Glossar",
  aggregation: "Aggregation",
  aggregation_description: "Eine 'hat-ein'-Beziehung, aber das Kindelement kann unabh\u00E4ngig vom Elternelement existieren.",
  aggregation_example: "Beispiel: Ein Team hat Spieler. Wenn das Team gel\u00F6scht wird, existieren die Spieler weiterhin.",
  composition: "Komposition",
  composition_description: "Eine starke 'hat-ein'-Beziehung, bei der der Lebenszyklus des Kindes an den Eltern gebunden ist.",
  composition_example: "Beispiel: Ein Haus hat R\u00E4ume. Wenn das Haus zerst\u00F6rt wird, werden die R\u00E4ume ebenfalls zerst\u00F6rt.",
  inheritance: "Vererbung",
  inheritance_description: "Eine 'ist-ein'-Beziehung, bei der eine Klasse von einer anderen abgeleitet ist.",
  inheritance_example: "Beispiel: Ein Auto ist ein Fahrzeug.",
  association: "Assoziation",
  association_description: "Eine allgemeine Verbindung zwischen zwei Klassen. Keine impliziten Eigenschaften.",
  association_example: "Beispiel: Ein Lehrer ist mit mehreren Sch\u00FClern assoziiert.",
  dependency: "Abh\u00E4ngigkeit",
  dependency_description: "Eine Klasse nutzt oder h\u00E4ngt vor\u00FCbergehend von einer anderen ab.",
  dependency_example: "Beispiel: Ein Berichtsgenerator h\u00E4ngt w\u00E4hrend der Ausf\u00FChrung von einer Datenbank ab.",
  realization: "Realisierung",
  realization_description: "Eine Beziehung, bei der eine konkrete Klasse das von einer anderen definierte Interface oder den Vertrag implementiert.",
  realization_example: "Beispiel: Eine Autoklasse realisiert das Fahrzeug-Interface.",
  search_projects: "Projekte durchsuchen",
  sort_by: "Sortieren nach",
  last_edited: "Zuletzt bearbeitet"
};

export default de;
